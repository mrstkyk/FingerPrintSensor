;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 03.06.2018 18:26:31
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF002EF6A  	GOTO        1236
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_UART1_Write:
;__Lib_UART_c67.c,58 :: 		
;__Lib_UART_c67.c,59 :: 		
L_UART1_Write3:
0x001C	0xB2AC      	BTFSC       TXSTA, 1 
0x001E	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67.c,60 :: 		
0x0020	0x0000      	NOP
0x0022	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,61 :: 		
0x0024	0xFFADC02E  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67.c,62 :: 		
L_end_UART1_Write:
0x0028	0x0012      	RETURN      0
; end of _UART1_Write
_SERIAL_WRITE:
;dy50.h,106 :: 		uint8_t SERIAL_WRITE (uint8_t variable)
;dy50.h,108 :: 		UART1_Write(variable);
0x002A	0xF02EC02C  	MOVFF       FARG_SERIAL_WRITE_variable, FARG_UART1_Write_data_
0x002E	0xDFF6      	RCALL       _UART1_Write
;dy50.h,111 :: 		}
L_end_SERIAL_WRITE:
0x0030	0x0012      	RETURN      0
; end of _SERIAL_WRITE
_SERIAL_WRITE_U16:
;dy50.h,113 :: 		uint16_t SERIAL_WRITE_U16(uint16_t variable)
;dy50.h,114 :: 		{UART1_Write(variable>>8);
0x0032	0xF000C02D  	MOVFF       FARG_SERIAL_WRITE_U16_variable+1, R0
0x0036	0x6A01      	CLRF        R1 
0x0038	0xF02EC000  	MOVFF       R0, FARG_UART1_Write_data_
0x003C	0xDFEF      	RCALL       _UART1_Write
;dy50.h,116 :: 		UART1_Write(variable&0XFF);
0x003E	0x0EFF      	MOVLW       255
0x0040	0x142C      	ANDWF       FARG_SERIAL_WRITE_U16_variable, 0 
0x0042	0x6E2E      	MOVWF       FARG_UART1_Write_data_ 
0x0044	0xDFEB      	RCALL       _UART1_Write
;dy50.h,119 :: 		}
L_end_SERIAL_WRITE_U16:
0x0046	0x0012      	RETURN      0
; end of _SERIAL_WRITE_U16
_writeStructuredPacket:
;dy50.h,364 :: 		void writeStructuredPacket(Adafruit_Fingerprint_Packet * packet) {
;dy50.h,368 :: 		SERIAL_WRITE_U16(packet->start_code);
0x0048	0xFFE9C025  	MOVFF       FARG_writeStructuredPacket_packet, FSR0L
0x004C	0xFFEAC026  	MOVFF       FARG_writeStructuredPacket_packet+1, FSR0H
0x0050	0xF02CCFEE  	MOVFF       POSTINC0, FARG_SERIAL_WRITE_U16_variable
0x0054	0xF02DCFEE  	MOVFF       POSTINC0, FARG_SERIAL_WRITE_U16_variable+1
0x0058	0xDFEC      	RCALL       _SERIAL_WRITE_U16
;dy50.h,369 :: 		SERIAL_WRITE(packet->address[0]);
0x005A	0x0E02      	MOVLW       2
0x005C	0x2425      	ADDWF       FARG_writeStructuredPacket_packet, 0 
0x005E	0x6EE9      	MOVWF       FSR0L 
0x0060	0x0E00      	MOVLW       0
0x0062	0x2026      	ADDWFC      FARG_writeStructuredPacket_packet+1, 0 
0x0064	0x6EEA      	MOVWF       FSR0H 
0x0066	0xF02CCFEE  	MOVFF       POSTINC0, FARG_SERIAL_WRITE_variable
0x006A	0xDFDF      	RCALL       _SERIAL_WRITE
;dy50.h,370 :: 		SERIAL_WRITE(packet->address[1]);
0x006C	0x0E02      	MOVLW       2
0x006E	0x2425      	ADDWF       FARG_writeStructuredPacket_packet, 0 
0x0070	0x6E00      	MOVWF       R0 
0x0072	0x0E00      	MOVLW       0
0x0074	0x2026      	ADDWFC      FARG_writeStructuredPacket_packet+1, 0 
0x0076	0x6E01      	MOVWF       R1 
0x0078	0x0E01      	MOVLW       1
0x007A	0x2400      	ADDWF       R0, 0 
0x007C	0x6EE9      	MOVWF       FSR0L 
0x007E	0x0E00      	MOVLW       0
0x0080	0x2001      	ADDWFC      R1, 0 
0x0082	0x6EEA      	MOVWF       FSR0H 
0x0084	0xF02CCFEE  	MOVFF       POSTINC0, FARG_SERIAL_WRITE_variable
0x0088	0xDFD0      	RCALL       _SERIAL_WRITE
;dy50.h,371 :: 		SERIAL_WRITE(packet->address[2]);
0x008A	0x0E02      	MOVLW       2
0x008C	0x2425      	ADDWF       FARG_writeStructuredPacket_packet, 0 
0x008E	0x6E00      	MOVWF       R0 
0x0090	0x0E00      	MOVLW       0
0x0092	0x2026      	ADDWFC      FARG_writeStructuredPacket_packet+1, 0 
0x0094	0x6E01      	MOVWF       R1 
0x0096	0x0E02      	MOVLW       2
0x0098	0x2400      	ADDWF       R0, 0 
0x009A	0x6EE9      	MOVWF       FSR0L 
0x009C	0x0E00      	MOVLW       0
0x009E	0x2001      	ADDWFC      R1, 0 
0x00A0	0x6EEA      	MOVWF       FSR0H 
0x00A2	0xF02CCFEE  	MOVFF       POSTINC0, FARG_SERIAL_WRITE_variable
0x00A6	0xDFC1      	RCALL       _SERIAL_WRITE
;dy50.h,372 :: 		SERIAL_WRITE(packet->address[3]);
0x00A8	0x0E02      	MOVLW       2
0x00AA	0x2425      	ADDWF       FARG_writeStructuredPacket_packet, 0 
0x00AC	0x6E00      	MOVWF       R0 
0x00AE	0x0E00      	MOVLW       0
0x00B0	0x2026      	ADDWFC      FARG_writeStructuredPacket_packet+1, 0 
0x00B2	0x6E01      	MOVWF       R1 
0x00B4	0x0E03      	MOVLW       3
0x00B6	0x2400      	ADDWF       R0, 0 
0x00B8	0x6EE9      	MOVWF       FSR0L 
0x00BA	0x0E00      	MOVLW       0
0x00BC	0x2001      	ADDWFC      R1, 0 
0x00BE	0x6EEA      	MOVWF       FSR0H 
0x00C0	0xF02CCFEE  	MOVFF       POSTINC0, FARG_SERIAL_WRITE_variable
0x00C4	0xDFB2      	RCALL       _SERIAL_WRITE
;dy50.h,373 :: 		SERIAL_WRITE(packet->type);
0x00C6	0x0E06      	MOVLW       6
0x00C8	0x2425      	ADDWF       FARG_writeStructuredPacket_packet, 0 
0x00CA	0x6EE9      	MOVWF       FSR0L 
0x00CC	0x0E00      	MOVLW       0
0x00CE	0x2026      	ADDWFC      FARG_writeStructuredPacket_packet+1, 0 
0x00D0	0x6EEA      	MOVWF       FSR0H 
0x00D2	0xF02CCFEE  	MOVFF       POSTINC0, FARG_SERIAL_WRITE_variable
0x00D6	0xDFA9      	RCALL       _SERIAL_WRITE
;dy50.h,375 :: 		wire_length = packet->length + 2;
0x00D8	0x0E07      	MOVLW       7
0x00DA	0x2425      	ADDWF       FARG_writeStructuredPacket_packet, 0 
0x00DC	0x6EE9      	MOVWF       FSR0L 
0x00DE	0x0E00      	MOVLW       0
0x00E0	0x2026      	ADDWFC      FARG_writeStructuredPacket_packet+1, 0 
0x00E2	0x6EEA      	MOVWF       FSR0H 
0x00E4	0x0E02      	MOVLW       2
0x00E6	0x24EE      	ADDWF       POSTINC0, 0 
0x00E8	0x6E00      	MOVWF       R0 
0x00EA	0x0E00      	MOVLW       0
0x00EC	0x20EE      	ADDWFC      POSTINC0, 0 
0x00EE	0x6E01      	MOVWF       R1 
0x00F0	0xF027C000  	MOVFF       R0, writeStructuredPacket_wire_length_L0
0x00F4	0xF028C001  	MOVFF       R1, writeStructuredPacket_wire_length_L0+1
;dy50.h,377 :: 		SERIAL_WRITE_U16(wire_length);
0x00F8	0xF02CC000  	MOVFF       R0, FARG_SERIAL_WRITE_U16_variable
0x00FC	0xF02DC001  	MOVFF       R1, FARG_SERIAL_WRITE_U16_variable+1
0x0100	0xDF98      	RCALL       _SERIAL_WRITE_U16
;dy50.h,379 :: 		sum = ((wire_length)>>8) + ((wire_length)&0xFF) + packet->type;
0x0102	0xF029C028  	MOVFF       writeStructuredPacket_wire_length_L0+1, writeStructuredPacket_sum_L0
0x0106	0x6A2A      	CLRF        writeStructuredPacket_sum_L0+1 
0x0108	0x0EFF      	MOVLW       255
0x010A	0x1427      	ANDWF       writeStructuredPacket_wire_length_L0, 0 
0x010C	0x6E00      	MOVWF       R0 
0x010E	0xF001C028  	MOVFF       writeStructuredPacket_wire_length_L0+1, R1
0x0112	0x0E00      	MOVLW       0
0x0114	0x1601      	ANDWF       R1, 1 
0x0116	0x5000      	MOVF        R0, 0 
0x0118	0x2629      	ADDWF       writeStructuredPacket_sum_L0, 1 
0x011A	0x5001      	MOVF        R1, 0 
0x011C	0x222A      	ADDWFC      writeStructuredPacket_sum_L0+1, 1 
0x011E	0x0E06      	MOVLW       6
0x0120	0x2425      	ADDWF       FARG_writeStructuredPacket_packet, 0 
0x0122	0x6ED9      	MOVWF       FSR2L 
0x0124	0x0E00      	MOVLW       0
0x0126	0x2026      	ADDWFC      FARG_writeStructuredPacket_packet+1, 0 
0x0128	0x6EDA      	MOVWF       FSR2H 
0x012A	0x50DE      	MOVF        POSTINC2, 0 
0x012C	0x2629      	ADDWF       writeStructuredPacket_sum_L0, 1 
0x012E	0x0E00      	MOVLW       0
0x0130	0x222A      	ADDWFC      writeStructuredPacket_sum_L0+1, 1 
;dy50.h,380 :: 		for ( i=0; i< packet->length; i++) {
0x0132	0x6A2B      	CLRF        writeStructuredPacket_i_L0 
L_writeStructuredPacket5:
0x0134	0x0E07      	MOVLW       7
0x0136	0x2425      	ADDWF       FARG_writeStructuredPacket_packet, 0 
0x0138	0x6ED9      	MOVWF       FSR2L 
0x013A	0x0E00      	MOVLW       0
0x013C	0x2026      	ADDWFC      FARG_writeStructuredPacket_packet+1, 0 
0x013E	0x6EDA      	MOVWF       FSR2H 
0x0140	0xF001CFDE  	MOVFF       POSTINC2, R1
0x0144	0xF002CFDE  	MOVFF       POSTINC2, R2
0x0148	0x0E00      	MOVLW       0
0x014A	0x6E00      	MOVWF       R0 
0x014C	0x5002      	MOVF        R2, 0 
0x014E	0x5C00      	SUBWF       R0, 0 
0x0150	0xE102      	BNZ         L__writeStructuredPacket76
0x0152	0x5001      	MOVF        R1, 0 
0x0154	0x5C2B      	SUBWF       writeStructuredPacket_i_L0, 0 
L__writeStructuredPacket76:
0x0156	0xE221      	BC          L_writeStructuredPacket6
;dy50.h,381 :: 		SERIAL_WRITE(packet->dataraw[i]);
0x0158	0x0E09      	MOVLW       9
0x015A	0x2425      	ADDWF       FARG_writeStructuredPacket_packet, 0 
0x015C	0x6E00      	MOVWF       R0 
0x015E	0x0E00      	MOVLW       0
0x0160	0x2026      	ADDWFC      FARG_writeStructuredPacket_packet+1, 0 
0x0162	0x6E01      	MOVWF       R1 
0x0164	0x502B      	MOVF        writeStructuredPacket_i_L0, 0 
0x0166	0x2400      	ADDWF       R0, 0 
0x0168	0x6EE9      	MOVWF       FSR0L 
0x016A	0x0E00      	MOVLW       0
0x016C	0x2001      	ADDWFC      R1, 0 
0x016E	0x6EEA      	MOVWF       FSR0H 
0x0170	0xF02CCFEE  	MOVFF       POSTINC0, FARG_SERIAL_WRITE_variable
0x0174	0xDF5A      	RCALL       _SERIAL_WRITE
;dy50.h,382 :: 		sum += packet->dataraw[i];
0x0176	0x0E09      	MOVLW       9
0x0178	0x2425      	ADDWF       FARG_writeStructuredPacket_packet, 0 
0x017A	0x6E00      	MOVWF       R0 
0x017C	0x0E00      	MOVLW       0
0x017E	0x2026      	ADDWFC      FARG_writeStructuredPacket_packet+1, 0 
0x0180	0x6E01      	MOVWF       R1 
0x0182	0x502B      	MOVF        writeStructuredPacket_i_L0, 0 
0x0184	0x2400      	ADDWF       R0, 0 
0x0186	0x6ED9      	MOVWF       FSR2L 
0x0188	0x0E00      	MOVLW       0
0x018A	0x2001      	ADDWFC      R1, 0 
0x018C	0x6EDA      	MOVWF       FSR2H 
0x018E	0x50DE      	MOVF        POSTINC2, 0 
0x0190	0x2629      	ADDWF       writeStructuredPacket_sum_L0, 1 
0x0192	0x0E00      	MOVLW       0
0x0194	0x222A      	ADDWFC      writeStructuredPacket_sum_L0+1, 1 
;dy50.h,380 :: 		for ( i=0; i< packet->length; i++) {
0x0196	0x2A2B      	INCF        writeStructuredPacket_i_L0, 1 
;dy50.h,383 :: 		}
0x0198	0xD7CD      	BRA         L_writeStructuredPacket5
L_writeStructuredPacket6:
;dy50.h,385 :: 		SERIAL_WRITE_U16(sum);
0x019A	0xF02CC029  	MOVFF       writeStructuredPacket_sum_L0, FARG_SERIAL_WRITE_U16_variable
0x019E	0xF02DC02A  	MOVFF       writeStructuredPacket_sum_L0+1, FARG_SERIAL_WRITE_U16_variable+1
0x01A2	0xDF47      	RCALL       _SERIAL_WRITE_U16
;dy50.h,386 :: 		return;
;dy50.h,388 :: 		}
L_end_writeStructuredPacket:
0x01A4	0x0012      	RETURN      0
; end of _writeStructuredPacket
_getStructuredPacket:
;dy50.h,399 :: 		uint8_t getStructuredPacket(Adafruit_Fingerprint_Packet * packet, uint16_t timeout) {
;dy50.h,401 :: 		uint16_t idx=0, timer=0;
0x01A6	0x6A29      	CLRF        getStructuredPacket_idx_L0 
0x01A8	0x6A2A      	CLRF        getStructuredPacket_idx_L0+1 
;dy50.h,403 :: 		while(true) {
L_getStructuredPacket8:
;dy50.h,405 :: 		switch (idx) {
0x01AA	0xD0B4      	BRA         L_getStructuredPacket10
;dy50.h,406 :: 		case 0:
L_getStructuredPacket12:
;dy50.h,407 :: 		if (byte != (FINGERPRINT_STARTCODE >> 8))
0x01AC	0x0E00      	MOVLW       0
0x01AE	0x0A00      	XORLW       0
0x01B0	0xE102      	BNZ         L__getStructuredPacket78
0x01B2	0x0EEF      	MOVLW       239
0x01B4	0x1805      	XORWF       R5, 0 
L__getStructuredPacket78:
0x01B6	0xE001      	BZ          L_getStructuredPacket13
;dy50.h,408 :: 		continue;
0x01B8	0xD7F8      	BRA         L_getStructuredPacket8
L_getStructuredPacket13:
;dy50.h,409 :: 		packet->start_code = (uint16_t)byte << 8;
0x01BA	0xF003C005  	MOVFF       R5, R3
0x01BE	0x0E00      	MOVLW       0
0x01C0	0x6E04      	MOVWF       R4 
0x01C2	0xF001C003  	MOVFF       R3, R1
0x01C6	0x6A00      	CLRF        R0 
0x01C8	0xFFE1C025  	MOVFF       FARG_getStructuredPacket_packet, FSR1L
0x01CC	0xFFE2C026  	MOVFF       FARG_getStructuredPacket_packet+1, FSR1H
0x01D0	0xFFE6C000  	MOVFF       R0, POSTINC1
0x01D4	0xFFE6C001  	MOVFF       R1, POSTINC1
;dy50.h,410 :: 		break;
0x01D8	0xD0DD      	BRA         L_getStructuredPacket11
;dy50.h,411 :: 		case 1:
L_getStructuredPacket14:
;dy50.h,412 :: 		packet->start_code |= byte;
0x01DA	0xFFE9C025  	MOVFF       FARG_getStructuredPacket_packet, FSR0L
0x01DE	0xFFEAC026  	MOVFF       FARG_getStructuredPacket_packet+1, FSR0H
0x01E2	0xF000CFEE  	MOVFF       POSTINC0, R0
0x01E6	0xF001CFEE  	MOVFF       POSTINC0, R1
0x01EA	0x5005      	MOVF        R5, 0 
0x01EC	0x1200      	IORWF       R0, 1 
0x01EE	0x0E00      	MOVLW       0
0x01F0	0x1201      	IORWF       R1, 1 
0x01F2	0xFFE1C025  	MOVFF       FARG_getStructuredPacket_packet, FSR1L
0x01F6	0xFFE2C026  	MOVFF       FARG_getStructuredPacket_packet+1, FSR1H
0x01FA	0xFFE6C000  	MOVFF       R0, POSTINC1
0x01FE	0xFFE6C001  	MOVFF       R1, POSTINC1
;dy50.h,413 :: 		if (packet->start_code != FINGERPRINT_STARTCODE)
0x0202	0xFFE9C025  	MOVFF       FARG_getStructuredPacket_packet, FSR0L
0x0206	0xFFEAC026  	MOVFF       FARG_getStructuredPacket_packet+1, FSR0H
0x020A	0xF001CFEE  	MOVFF       POSTINC0, R1
0x020E	0xF002CFEE  	MOVFF       POSTINC0, R2
0x0212	0x5002      	MOVF        R2, 0 
0x0214	0x0AEF      	XORLW       239
0x0216	0xE102      	BNZ         L__getStructuredPacket79
0x0218	0x0E01      	MOVLW       1
0x021A	0x1801      	XORWF       R1, 0 
L__getStructuredPacket79:
0x021C	0xE003      	BZ          L_getStructuredPacket15
;dy50.h,414 :: 		return FINGERPRINT_BADPACKET;
0x021E	0x0EFE      	MOVLW       254
0x0220	0x6E00      	MOVWF       R0 
0x0222	0xD0BB      	BRA         L_end_getStructuredPacket
L_getStructuredPacket15:
;dy50.h,415 :: 		break;
0x0224	0xD0B7      	BRA         L_getStructuredPacket11
;dy50.h,416 :: 		case 2:
L_getStructuredPacket16:
;dy50.h,417 :: 		case 3:
L_getStructuredPacket17:
;dy50.h,418 :: 		case 4:
L_getStructuredPacket18:
;dy50.h,419 :: 		case 5:
L_getStructuredPacket19:
;dy50.h,420 :: 		packet->address[idx-2] = byte;
0x0226	0x0E02      	MOVLW       2
0x0228	0x2425      	ADDWF       FARG_getStructuredPacket_packet, 0 
0x022A	0x6E02      	MOVWF       R2 
0x022C	0x0E00      	MOVLW       0
0x022E	0x2026      	ADDWFC      FARG_getStructuredPacket_packet+1, 0 
0x0230	0x6E03      	MOVWF       R3 
0x0232	0x0E02      	MOVLW       2
0x0234	0x5C29      	SUBWF       getStructuredPacket_idx_L0, 0 
0x0236	0x6E00      	MOVWF       R0 
0x0238	0x0E00      	MOVLW       0
0x023A	0x582A      	SUBWFB      getStructuredPacket_idx_L0+1, 0 
0x023C	0x6E01      	MOVWF       R1 
0x023E	0x5000      	MOVF        R0, 0 
0x0240	0x2402      	ADDWF       R2, 0 
0x0242	0x6EE1      	MOVWF       FSR1L 
0x0244	0x5001      	MOVF        R1, 0 
0x0246	0x2003      	ADDWFC      R3, 0 
0x0248	0x6EE2      	MOVWF       FSR1H 
0x024A	0xFFE6C005  	MOVFF       R5, POSTINC1
;dy50.h,421 :: 		break;
0x024E	0xD0A2      	BRA         L_getStructuredPacket11
;dy50.h,422 :: 		case 6:
L_getStructuredPacket20:
;dy50.h,423 :: 		packet->type = byte;
0x0250	0x0E06      	MOVLW       6
0x0252	0x2425      	ADDWF       FARG_getStructuredPacket_packet, 0 
0x0254	0x6EE1      	MOVWF       FSR1L 
0x0256	0x0E00      	MOVLW       0
0x0258	0x2026      	ADDWFC      FARG_getStructuredPacket_packet+1, 0 
0x025A	0x6EE2      	MOVWF       FSR1H 
0x025C	0xFFE6C005  	MOVFF       R5, POSTINC1
;dy50.h,424 :: 		break;
0x0260	0xD099      	BRA         L_getStructuredPacket11
;dy50.h,425 :: 		case 7:
L_getStructuredPacket21:
;dy50.h,426 :: 		packet->length = (uint16_t)byte << 8;
0x0262	0x0E07      	MOVLW       7
0x0264	0x2425      	ADDWF       FARG_getStructuredPacket_packet, 0 
0x0266	0x6EE1      	MOVWF       FSR1L 
0x0268	0x0E00      	MOVLW       0
0x026A	0x2026      	ADDWFC      FARG_getStructuredPacket_packet+1, 0 
0x026C	0x6EE2      	MOVWF       FSR1H 
0x026E	0xF003C005  	MOVFF       R5, R3
0x0272	0x0E00      	MOVLW       0
0x0274	0x6E04      	MOVWF       R4 
0x0276	0xF001C003  	MOVFF       R3, R1
0x027A	0x6A00      	CLRF        R0 
0x027C	0xFFE6C000  	MOVFF       R0, POSTINC1
0x0280	0xFFE6C001  	MOVFF       R1, POSTINC1
;dy50.h,427 :: 		break;
0x0284	0xD087      	BRA         L_getStructuredPacket11
;dy50.h,428 :: 		case 8:
L_getStructuredPacket22:
;dy50.h,429 :: 		packet->length |= byte;
0x0286	0x0E07      	MOVLW       7
0x0288	0x2425      	ADDWF       FARG_getStructuredPacket_packet, 0 
0x028A	0x6E02      	MOVWF       R2 
0x028C	0x0E00      	MOVLW       0
0x028E	0x2026      	ADDWFC      FARG_getStructuredPacket_packet+1, 0 
0x0290	0x6E03      	MOVWF       R3 
0x0292	0xFFE9C002  	MOVFF       R2, FSR0L
0x0296	0xFFEAC003  	MOVFF       R3, FSR0H
0x029A	0x5005      	MOVF        R5, 0 
0x029C	0x10EE      	IORWF       POSTINC0, 0 
0x029E	0x6E00      	MOVWF       R0 
0x02A0	0xF001CFEE  	MOVFF       POSTINC0, R1
0x02A4	0x0E00      	MOVLW       0
0x02A6	0x1201      	IORWF       R1, 1 
0x02A8	0xFFE1C002  	MOVFF       R2, FSR1L
0x02AC	0xFFE2C003  	MOVFF       R3, FSR1H
0x02B0	0xFFE6C000  	MOVFF       R0, POSTINC1
0x02B4	0xFFE6C001  	MOVFF       R1, POSTINC1
;dy50.h,430 :: 		break;
0x02B8	0xD06D      	BRA         L_getStructuredPacket11
;dy50.h,431 :: 		default:
L_getStructuredPacket23:
;dy50.h,432 :: 		packet->dataraw[idx-9] = byte;
0x02BA	0x0E09      	MOVLW       9
0x02BC	0x2425      	ADDWF       FARG_getStructuredPacket_packet, 0 
0x02BE	0x6E02      	MOVWF       R2 
0x02C0	0x0E00      	MOVLW       0
0x02C2	0x2026      	ADDWFC      FARG_getStructuredPacket_packet+1, 0 
0x02C4	0x6E03      	MOVWF       R3 
0x02C6	0x0E09      	MOVLW       9
0x02C8	0x5C29      	SUBWF       getStructuredPacket_idx_L0, 0 
0x02CA	0x6E00      	MOVWF       R0 
0x02CC	0x0E00      	MOVLW       0
0x02CE	0x582A      	SUBWFB      getStructuredPacket_idx_L0+1, 0 
0x02D0	0x6E01      	MOVWF       R1 
0x02D2	0x5000      	MOVF        R0, 0 
0x02D4	0x2402      	ADDWF       R2, 0 
0x02D6	0x6EE1      	MOVWF       FSR1L 
0x02D8	0x5001      	MOVF        R1, 0 
0x02DA	0x2003      	ADDWFC      R3, 0 
0x02DC	0x6EE2      	MOVWF       FSR1H 
0x02DE	0xFFE6C005  	MOVFF       R5, POSTINC1
;dy50.h,433 :: 		if((idx-8) == packet->length)
0x02E2	0x0E08      	MOVLW       8
0x02E4	0x5C29      	SUBWF       getStructuredPacket_idx_L0, 0 
0x02E6	0x6E03      	MOVWF       R3 
0x02E8	0x0E00      	MOVLW       0
0x02EA	0x582A      	SUBWFB      getStructuredPacket_idx_L0+1, 0 
0x02EC	0x6E04      	MOVWF       R4 
0x02EE	0x0E07      	MOVLW       7
0x02F0	0x2425      	ADDWF       FARG_getStructuredPacket_packet, 0 
0x02F2	0x6ED9      	MOVWF       FSR2L 
0x02F4	0x0E00      	MOVLW       0
0x02F6	0x2026      	ADDWFC      FARG_getStructuredPacket_packet+1, 0 
0x02F8	0x6EDA      	MOVWF       FSR2H 
0x02FA	0xF001CFDE  	MOVFF       POSTINC2, R1
0x02FE	0xF002CFDE  	MOVFF       POSTINC2, R2
0x0302	0x5004      	MOVF        R4, 0 
0x0304	0x1802      	XORWF       R2, 0 
0x0306	0xE102      	BNZ         L__getStructuredPacket80
0x0308	0x5001      	MOVF        R1, 0 
0x030A	0x1803      	XORWF       R3, 0 
L__getStructuredPacket80:
0x030C	0xE102      	BNZ         L_getStructuredPacket24
;dy50.h,434 :: 		return FINGERPRINT_OK;
0x030E	0x6A00      	CLRF        R0 
0x0310	0xD044      	BRA         L_end_getStructuredPacket
L_getStructuredPacket24:
;dy50.h,435 :: 		break;
0x0312	0xD040      	BRA         L_getStructuredPacket11
;dy50.h,436 :: 		}
L_getStructuredPacket10:
0x0314	0x0E00      	MOVLW       0
0x0316	0x182A      	XORWF       getStructuredPacket_idx_L0+1, 0 
0x0318	0xE102      	BNZ         L__getStructuredPacket81
0x031A	0x0E00      	MOVLW       0
0x031C	0x1829      	XORWF       getStructuredPacket_idx_L0, 0 
L__getStructuredPacket81:
0x031E	0xB4D8      	BTFSC       STATUS, 2 
0x0320	0xD745      	BRA         L_getStructuredPacket12
0x0322	0x0E00      	MOVLW       0
0x0324	0x182A      	XORWF       getStructuredPacket_idx_L0+1, 0 
0x0326	0xE102      	BNZ         L__getStructuredPacket82
0x0328	0x0E01      	MOVLW       1
0x032A	0x1829      	XORWF       getStructuredPacket_idx_L0, 0 
L__getStructuredPacket82:
0x032C	0xB4D8      	BTFSC       STATUS, 2 
0x032E	0xD755      	BRA         L_getStructuredPacket14
0x0330	0x0E00      	MOVLW       0
0x0332	0x182A      	XORWF       getStructuredPacket_idx_L0+1, 0 
0x0334	0xE102      	BNZ         L__getStructuredPacket83
0x0336	0x0E02      	MOVLW       2
0x0338	0x1829      	XORWF       getStructuredPacket_idx_L0, 0 
L__getStructuredPacket83:
0x033A	0xB4D8      	BTFSC       STATUS, 2 
0x033C	0xD774      	BRA         L_getStructuredPacket16
0x033E	0x0E00      	MOVLW       0
0x0340	0x182A      	XORWF       getStructuredPacket_idx_L0+1, 0 
0x0342	0xE102      	BNZ         L__getStructuredPacket84
0x0344	0x0E03      	MOVLW       3
0x0346	0x1829      	XORWF       getStructuredPacket_idx_L0, 0 
L__getStructuredPacket84:
0x0348	0xB4D8      	BTFSC       STATUS, 2 
0x034A	0xD76D      	BRA         L_getStructuredPacket17
0x034C	0x0E00      	MOVLW       0
0x034E	0x182A      	XORWF       getStructuredPacket_idx_L0+1, 0 
0x0350	0xE102      	BNZ         L__getStructuredPacket85
0x0352	0x0E04      	MOVLW       4
0x0354	0x1829      	XORWF       getStructuredPacket_idx_L0, 0 
L__getStructuredPacket85:
0x0356	0xB4D8      	BTFSC       STATUS, 2 
0x0358	0xD766      	BRA         L_getStructuredPacket18
0x035A	0x0E00      	MOVLW       0
0x035C	0x182A      	XORWF       getStructuredPacket_idx_L0+1, 0 
0x035E	0xE102      	BNZ         L__getStructuredPacket86
0x0360	0x0E05      	MOVLW       5
0x0362	0x1829      	XORWF       getStructuredPacket_idx_L0, 0 
L__getStructuredPacket86:
0x0364	0xB4D8      	BTFSC       STATUS, 2 
0x0366	0xD75F      	BRA         L_getStructuredPacket19
0x0368	0x0E00      	MOVLW       0
0x036A	0x182A      	XORWF       getStructuredPacket_idx_L0+1, 0 
0x036C	0xE102      	BNZ         L__getStructuredPacket87
0x036E	0x0E06      	MOVLW       6
0x0370	0x1829      	XORWF       getStructuredPacket_idx_L0, 0 
L__getStructuredPacket87:
0x0372	0xB4D8      	BTFSC       STATUS, 2 
0x0374	0xD76D      	BRA         L_getStructuredPacket20
0x0376	0x0E00      	MOVLW       0
0x0378	0x182A      	XORWF       getStructuredPacket_idx_L0+1, 0 
0x037A	0xE102      	BNZ         L__getStructuredPacket88
0x037C	0x0E07      	MOVLW       7
0x037E	0x1829      	XORWF       getStructuredPacket_idx_L0, 0 
L__getStructuredPacket88:
0x0380	0xB4D8      	BTFSC       STATUS, 2 
0x0382	0xD76F      	BRA         L_getStructuredPacket21
0x0384	0x0E00      	MOVLW       0
0x0386	0x182A      	XORWF       getStructuredPacket_idx_L0+1, 0 
0x0388	0xE102      	BNZ         L__getStructuredPacket89
0x038A	0x0E08      	MOVLW       8
0x038C	0x1829      	XORWF       getStructuredPacket_idx_L0, 0 
L__getStructuredPacket89:
0x038E	0xB4D8      	BTFSC       STATUS, 2 
0x0390	0xD77A      	BRA         L_getStructuredPacket22
0x0392	0xD793      	BRA         L_getStructuredPacket23
L_getStructuredPacket11:
;dy50.h,437 :: 		idx++;
0x0394	0x4A29      	INFSNZ      getStructuredPacket_idx_L0, 1 
0x0396	0x2A2A      	INCF        getStructuredPacket_idx_L0+1, 1 
;dy50.h,438 :: 		}
0x0398	0xD708      	BRA         L_getStructuredPacket8
;dy50.h,441 :: 		}
L_end_getStructuredPacket:
0x039A	0x0012      	RETURN      0
; end of _getStructuredPacket
_GET_CMD_PACKET:
;dy50.h,120 :: 		uint8_t GET_CMD_PACKET(uint8_t datacmd)
;dy50.h,123 :: 		packet.type=FINGERPRINT_COMMANDPACKET;
0x039C	0x0E01      	MOVLW       1
0x039E	0x6E1F      	MOVWF       _packet+6 
;dy50.h,124 :: 		packet.length=sizeof(datacmd);
0x03A0	0x0E01      	MOVLW       1
0x03A2	0x6E20      	MOVWF       _packet+7 
0x03A4	0x0E00      	MOVLW       0
0x03A6	0x6E21      	MOVWF       _packet+8 
;dy50.h,125 :: 		packet.dataraw[64]=datacmd;
0x03A8	0xF062C024  	MOVFF       FARG_GET_CMD_PACKET_datacmd, _packet+73
;dy50.h,126 :: 		writeStructuredPacket( &packet );
0x03AC	0x0E19      	MOVLW       _packet
0x03AE	0x6E25      	MOVWF       FARG_writeStructuredPacket_packet 
0x03B0	0x0E00      	MOVLW       hi_addr(_packet)
0x03B2	0x6E26      	MOVWF       FARG_writeStructuredPacket_packet+1 
0x03B4	0xDE49      	RCALL       _writeStructuredPacket
;dy50.h,127 :: 		if (getStructuredPacket(&packet,1000) != FINGERPRINT_OK)
0x03B6	0x0E19      	MOVLW       _packet
0x03B8	0x6E25      	MOVWF       FARG_getStructuredPacket_packet 
0x03BA	0x0E00      	MOVLW       hi_addr(_packet)
0x03BC	0x6E26      	MOVWF       FARG_getStructuredPacket_packet+1 
0x03BE	0x0EE8      	MOVLW       232
0x03C0	0x6E27      	MOVWF       FARG_getStructuredPacket_timeout 
0x03C2	0x0E03      	MOVLW       3
0x03C4	0x6E28      	MOVWF       FARG_getStructuredPacket_timeout+1 
0x03C6	0xDEEF      	RCALL       _getStructuredPacket
0x03C8	0x5000      	MOVF        R0, 0 
0x03CA	0x0A00      	XORLW       0
0x03CC	0xE003      	BZ          L_GET_CMD_PACKET0
;dy50.h,128 :: 		return FINGERPRINT_PACKETRECIEVEERR;
0x03CE	0x0E01      	MOVLW       1
0x03D0	0x6E00      	MOVWF       R0 
0x03D2	0xD006      	BRA         L_end_GET_CMD_PACKET
L_GET_CMD_PACKET0:
;dy50.h,129 :: 		if (packet.type != FINGERPRINT_ACKPACKET) return FINGERPRINT_PACKETRECIEVEERR;
0x03D4	0x501F      	MOVF        _packet+6, 0 
0x03D6	0x0A07      	XORLW       7
0x03D8	0xE003      	BZ          L_GET_CMD_PACKET1
0x03DA	0x0E01      	MOVLW       1
0x03DC	0x6E00      	MOVWF       R0 
0x03DE	0xD000      	BRA         L_end_GET_CMD_PACKET
L_GET_CMD_PACKET1:
;dy50.h,131 :: 		}
L_end_GET_CMD_PACKET:
0x03E0	0x0012      	RETURN      0
; end of _GET_CMD_PACKET
_SEND_CMD_PACKET:
;dy50.h,133 :: 		uint8_t SEND_CMD_PACKET(uint8_t datacmd)
;dy50.h,136 :: 		GET_CMD_PACKET(datacmd);
0x03E2	0xF024C023  	MOVFF       FARG_SEND_CMD_PACKET_datacmd, FARG_GET_CMD_PACKET_datacmd
0x03E6	0xDFDA      	RCALL       _GET_CMD_PACKET
;dy50.h,137 :: 		return packet.dataraw[0];
0x03E8	0xF000C022  	MOVFF       _packet+9, R0
;dy50.h,141 :: 		}
L_end_SEND_CMD_PACKET:
0x03EC	0x0012      	RETURN      0
; end of _SEND_CMD_PACKET
_getImage:
;dy50.h,185 :: 		uint8_t getImage(void) {
;dy50.h,186 :: 		SEND_CMD_PACKET(FINGERPRINT_GETIMAGE);
0x03EE	0x0E01      	MOVLW       1
0x03F0	0x6E23      	MOVWF       FARG_SEND_CMD_PACKET_datacmd 
0x03F2	0xDFF7      	RCALL       _SEND_CMD_PACKET
;dy50.h,187 :: 		}
L_end_getImage:
0x03F4	0x0012      	RETURN      0
; end of _getImage
_image2Tz:
;dy50.h,199 :: 		uint8_t image2Tz(uint8_t slot) {
;dy50.h,200 :: 		slot =1;
0x03F6	0x0E01      	MOVLW       1
0x03F8	0x6E22      	MOVWF       FARG_image2Tz_slot 
;dy50.h,201 :: 		SEND_CMD_PACKET(FINGERPRINT_IMAGE2TZ);
0x03FA	0x0E02      	MOVLW       2
0x03FC	0x6E23      	MOVWF       FARG_SEND_CMD_PACKET_datacmd 
0x03FE	0xDFF1      	RCALL       _SEND_CMD_PACKET
;dy50.h,202 :: 		SEND_CMD_PACKET(slot);
0x0400	0xF023C022  	MOVFF       FARG_image2Tz_slot, FARG_SEND_CMD_PACKET_datacmd
0x0404	0xDFEE      	RCALL       _SEND_CMD_PACKET
;dy50.h,203 :: 		}
L_end_image2Tz:
0x0406	0x0012      	RETURN      0
; end of _image2Tz
_fingerFastSearch:
;dy50.h,301 :: 		uint8_t fingerFastSearch(void) {
;dy50.h,303 :: 		GET_CMD_PACKET(FINGERPRINT_HISPEEDSEARCH);
0x0408	0x0E1B      	MOVLW       27
0x040A	0x6E24      	MOVWF       FARG_GET_CMD_PACKET_datacmd 
0x040C	0xDFC7      	RCALL       _GET_CMD_PACKET
;dy50.h,304 :: 		SEND_CMD_PACKET(0x01);
0x040E	0x0E01      	MOVLW       1
0x0410	0x6E23      	MOVWF       FARG_SEND_CMD_PACKET_datacmd 
0x0412	0xDFE7      	RCALL       _SEND_CMD_PACKET
;dy50.h,305 :: 		SEND_CMD_PACKET(0x00);
0x0414	0x6A23      	CLRF        FARG_SEND_CMD_PACKET_datacmd 
0x0416	0xDFE5      	RCALL       _SEND_CMD_PACKET
;dy50.h,306 :: 		SEND_CMD_PACKET(0x00);
0x0418	0x6A23      	CLRF        FARG_SEND_CMD_PACKET_datacmd 
0x041A	0xDFE3      	RCALL       _SEND_CMD_PACKET
;dy50.h,307 :: 		SEND_CMD_PACKET(0x00);
0x041C	0x6A23      	CLRF        FARG_SEND_CMD_PACKET_datacmd 
0x041E	0xDFE1      	RCALL       _SEND_CMD_PACKET
;dy50.h,308 :: 		SEND_CMD_PACKET(0xA3);
0x0420	0x0EA3      	MOVLW       163
0x0422	0x6E23      	MOVWF       FARG_SEND_CMD_PACKET_datacmd 
0x0424	0xDFDE      	RCALL       _SEND_CMD_PACKET
;dy50.h,309 :: 		fingerID = 0xFFFF;
0x0426	0x0EFF      	MOVLW       255
0x0428	0x6E17      	MOVWF       _fingerID 
0x042A	0x0EFF      	MOVLW       255
0x042C	0x6E18      	MOVWF       _fingerID+1 
;dy50.h,310 :: 		confidence = 0xFFFF;
0x042E	0x0EFF      	MOVLW       255
0x0430	0x6E15      	MOVWF       _confidence 
0x0432	0x0EFF      	MOVLW       255
0x0434	0x6E16      	MOVWF       _confidence+1 
;dy50.h,312 :: 		fingerID = packet.dataraw[1];
0x0436	0xF017C023  	MOVFF       _packet+10, _fingerID
0x043A	0x0E00      	MOVLW       0
0x043C	0x6E18      	MOVWF       _fingerID+1 
;dy50.h,313 :: 		fingerID <<= 8;
0x043E	0xF018C017  	MOVFF       _fingerID, _fingerID+1
0x0442	0x6A17      	CLRF        _fingerID 
;dy50.h,314 :: 		fingerID |= packet.dataraw[2];
0x0444	0x5024      	MOVF        _packet+11, 0 
0x0446	0x1217      	IORWF       _fingerID, 1 
0x0448	0x0E00      	MOVLW       0
0x044A	0x1218      	IORWF       _fingerID+1, 1 
;dy50.h,316 :: 		confidence = packet.dataraw[3];
0x044C	0xF015C025  	MOVFF       _packet+12, _confidence
0x0450	0x0E00      	MOVLW       0
0x0452	0x6E16      	MOVWF       _confidence+1 
;dy50.h,317 :: 		confidence <<= 8;
0x0454	0xF016C015  	MOVFF       _confidence, _confidence+1
0x0458	0x6A15      	CLRF        _confidence 
;dy50.h,318 :: 		confidence |= packet.dataraw[4];
0x045A	0x5026      	MOVF        _packet+13, 0 
0x045C	0x1215      	IORWF       _confidence, 1 
0x045E	0x0E00      	MOVLW       0
0x0460	0x1216      	IORWF       _confidence+1, 1 
;dy50.h,320 :: 		return packet.dataraw[0];
0x0462	0xF000C022  	MOVFF       _packet+9, R0
;dy50.h,321 :: 		}
L_end_fingerFastSearch:
0x0466	0x0012      	RETURN      0
; end of _fingerFastSearch
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0468	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x046A	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x046E	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0470	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0472	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0474	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0476	0x0012      	RETURN      0
; end of ___CC2DW
_getFingerprintIDez:
;FingerPrint.c,23 :: 		int getFingerprintIDez() {
;FingerPrint.c,24 :: 		uint8_t p = getImage();
0x0478	0xDFBA      	RCALL       _getImage
;FingerPrint.c,25 :: 		if (p != FINGERPRINT_OK)  return -1;
0x047A	0x5000      	MOVF        R0, 0 
0x047C	0x0A00      	XORLW       0
0x047E	0xE005      	BZ          L_getFingerprintIDez30
0x0480	0x0EFF      	MOVLW       255
0x0482	0x6E00      	MOVWF       R0 
0x0484	0x0EFF      	MOVLW       255
0x0486	0x6E01      	MOVWF       R1 
0x0488	0xD024      	BRA         L_end_getFingerprintIDez
L_getFingerprintIDez30:
;FingerPrint.c,27 :: 		p = image2Tz(1);
0x048A	0x0E01      	MOVLW       1
0x048C	0x6E22      	MOVWF       FARG_image2Tz_slot 
0x048E	0xDFB3      	RCALL       _image2Tz
;FingerPrint.c,28 :: 		if (p != FINGERPRINT_OK)  return -1;
0x0490	0x5000      	MOVF        R0, 0 
0x0492	0x0A00      	XORLW       0
0x0494	0xE005      	BZ          L_getFingerprintIDez31
0x0496	0x0EFF      	MOVLW       255
0x0498	0x6E00      	MOVWF       R0 
0x049A	0x0EFF      	MOVLW       255
0x049C	0x6E01      	MOVWF       R1 
0x049E	0xD019      	BRA         L_end_getFingerprintIDez
L_getFingerprintIDez31:
;FingerPrint.c,30 :: 		p = fingerFastSearch();
0x04A0	0xDFB3      	RCALL       _fingerFastSearch
;FingerPrint.c,31 :: 		if (p != FINGERPRINT_OK)  return -1;
0x04A2	0x5000      	MOVF        R0, 0 
0x04A4	0x0A00      	XORLW       0
0x04A6	0xE005      	BZ          L_getFingerprintIDez32
0x04A8	0x0EFF      	MOVLW       255
0x04AA	0x6E00      	MOVWF       R0 
0x04AC	0x0EFF      	MOVLW       255
0x04AE	0x6E01      	MOVWF       R1 
0x04B0	0xD010      	BRA         L_end_getFingerprintIDez
L_getFingerprintIDez32:
;FingerPrint.c,34 :: 		UART1_Write("Found ID #"); UART1_Write(fingerID);
0x04B2	0x0E03      	MOVLW       ?lstr_5_FingerPrint
0x04B4	0x6E2E      	MOVWF       FARG_UART1_Write_data_ 
0x04B6	0xDDB2      	RCALL       _UART1_Write
0x04B8	0xF02EC017  	MOVFF       _fingerID, FARG_UART1_Write_data_
0x04BC	0xDDAF      	RCALL       _UART1_Write
;FingerPrint.c,35 :: 		UART1_Write(" with confidence of "); UART1_Write(confidence);
0x04BE	0x0EEE      	MOVLW       ?lstr_6_FingerPrint
0x04C0	0x6E2E      	MOVWF       FARG_UART1_Write_data_ 
0x04C2	0xDDAC      	RCALL       _UART1_Write
0x04C4	0xF02EC015  	MOVFF       _confidence, FARG_UART1_Write_data_
0x04C8	0xDDA9      	RCALL       _UART1_Write
;FingerPrint.c,36 :: 		return fingerID;
0x04CA	0xF000C017  	MOVFF       _fingerID, R0
0x04CE	0xF001C018  	MOVFF       _fingerID+1, R1
;FingerPrint.c,37 :: 		}
L_end_getFingerprintIDez:
0x04D2	0x0012      	RETURN      0
; end of _getFingerprintIDez
_main:
;FingerPrint.c,105 :: 		void main()
;FingerPrint.c,107 :: 		while(1){
L_main54:
;FingerPrint.c,108 :: 		getFingerprintIDez();
0x04D4	0xDFD1      	RCALL       _getFingerprintIDez
;FingerPrint.c,109 :: 		delay_ms(50);            //don't ned to run this at full speed.
0x04D6	0x0E82      	MOVLW       130
0x04D8	0x6E0C      	MOVWF       R12, 0
0x04DA	0x0EDD      	MOVLW       221
0x04DC	0x6E0D      	MOVWF       R13, 0
L_main56:
0x04DE	0x2E0D      	DECFSZ      R13, 1, 0
0x04E0	0xD7FE      	BRA         L_main56
0x04E2	0x2E0C      	DECFSZ      R12, 1, 0
0x04E4	0xD7FC      	BRA         L_main56
0x04E6	0x0000      	NOP
0x04E8	0x0000      	NOP
;FingerPrint.c,110 :: 		}                      }
0x04EA	0xD7F4      	BRA         L_main54
L_end_main:
0x04EC	0xD7FF      	BRA         $+0
; end of _main
;FingerPrint.c,0 :: ?lstr_6_FingerPrint
0x04EE	0x7720 ;?lstr_6_FingerPrint+0
0x04F0	0x7469 ;?lstr_6_FingerPrint+2
0x04F2	0x2068 ;?lstr_6_FingerPrint+4
0x04F4	0x6F63 ;?lstr_6_FingerPrint+6
0x04F6	0x666E ;?lstr_6_FingerPrint+8
0x04F8	0x6469 ;?lstr_6_FingerPrint+10
0x04FA	0x6E65 ;?lstr_6_FingerPrint+12
0x04FC	0x6563 ;?lstr_6_FingerPrint+14
0x04FE	0x6F20 ;?lstr_6_FingerPrint+16
0x0500	0x2066 ;?lstr_6_FingerPrint+18
0x0502	0x00 ;?lstr_6_FingerPrint+20
; end of ?lstr_6_FingerPrint
;FingerPrint.c,0 :: ?lstr_5_FingerPrint
0x0503	0x6F46 ;?lstr_5_FingerPrint+0
0x0505	0x6E75 ;?lstr_5_FingerPrint+2
0x0507	0x2064 ;?lstr_5_FingerPrint+4
0x0509	0x4449 ;?lstr_5_FingerPrint+6
0x050B	0x2320 ;?lstr_5_FingerPrint+8
0x050D	0x00 ;?lstr_5_FingerPrint+10
; end of ?lstr_5_FingerPrint
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [14]    _UART1_Write
0x002A       [8]    _SERIAL_WRITE
0x0032      [22]    _SERIAL_WRITE_U16
0x0048     [350]    _writeStructuredPacket
0x01A6     [502]    _getStructuredPacket
0x039C      [70]    _GET_CMD_PACKET
0x03E2      [12]    _SEND_CMD_PACKET
0x03EE       [8]    _getImage
0x03F6      [18]    _image2Tz
0x0408      [96]    _fingerFastSearch
0x0468      [16]    ___CC2DW
0x0478      [92]    _getFingerprintIDez
0x04D4      [26]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    R0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileRead_i_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileReadBytes_Result_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    __Lib_TFT_JPEG_FileRead_i_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    FLASH_Write_32_i_L0
0x0001       [1]    R1
0x0001       [1]    __Lib_TFT_JPEG_FileReadBytes_Result_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    strlen_cp_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [2]    memchr_s_L0
0x0002       [2]    memset_pp_L0
0x0002       [1]    FLASH_Write_32_SaveINTCON_L0
0x0002       [1]    R2
0x0003       [1]    R3
0x0003       [2]    Ltrim_original_L0
0x0003       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT29
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [2]    memmove_tt_L0
0x0003       [1]    MM_Init_i_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [1]    R4
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    frexp_pom_L0
0x0004       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT40
0x0004       [2]    strcat_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    strncat_cp_L0
0x0005       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT54
0x0005       [1]    R5
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    memmove_ff_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [1]    getStructuredPacket_byte_L0
0x0006       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT69
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [1]    R6
0x0007       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    R7
0x0008       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bTable_L0
0x0008       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bTable_L0
0x0008       [1]    R8
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [2]    _confidence
0x0017       [2]    _fingerID
0x0019       [9]    _packet
0x0022       [1]    FARG_image2Tz_slot
0x0023       [1]    FARG_SEND_CMD_PACKET_datacmd
0x0024       [1]    FARG_GET_CMD_PACKET_datacmd
0x0025       [2]    FARG_getStructuredPacket_packet
0x0025       [2]    FARG_writeStructuredPacket_packet
0x0027       [2]    FARG_getStructuredPacket_timeout
0x0027       [2]    writeStructuredPacket_wire_length_L0
0x0029       [2]    writeStructuredPacket_sum_L0
0x0029       [2]    getStructuredPacket_idx_L0
0x002B       [1]    writeStructuredPacket_i_L0
0x002C       [2]    FARG_SERIAL_WRITE_U16_variable
0x002C       [1]    FARG_SERIAL_WRITE_variable
0x002E       [1]    FARG_UART1_Write_data_
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x04EE      [21]    ?lstr_6_FingerPrint
0x0503      [11]    ?lstr_5_FingerPrint
